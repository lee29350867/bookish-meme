2022/02/10
上午：
    自習：品管測試方式
    1.  邊界值測試
    2.  等價類劃分法 
    3.  錯誤推測法
    4.  狀態轉換測試
    5.  隨機測試
    6.  回歸測試
    7.  α 測試 / β 測試 / γ 測試
    8.  冒煙測試 
    邊界值測試：
    1. 列出所有可輸入的變數，假設有 n 個
    2. 每一個變數最常用在測試的邊界值有最小值、最小值-1、最小值+1、最大值、最大值-1、最大值+1
    3. 總共會有 6 個測試案例。
    4.  如果有 n 個變數，則測試案例就會有 6n+1，其中的「1」是表示全部變數都在正常範圍內的測試案例。
    等價類劃分法： 
    1.  依據數據邏輯，歸類出有效等價類與無效等價類
    2.  從中篩選出相同或不同的，並依次組合測試
    3.  有效等價類為 A1，A2。無效等價類為 B1，B2（命名根據個人習慣）
    錯誤推測法：
    1.  根據以往經驗、直覺與知識來推測待測軟體中可能存在的各種錯誤，從而設計測試案例。
    狀態轉換測試：
    1.  各個狀態之間轉換有一定的序列關係：縱向關係，先有A，變成B，然後產生C
    2.  各個狀態是並列關係，各個狀態間可以相互轉換：A可以變成B，B可以變回A
    3.  這兩種類型的狀態轉換，都需要注意用戶角色權限。
    4.  對狀態轉換的測試，我們設計的用例需要涵蓋以下三種：
    4.1 允許的狀態轉換
    4.2 不允許的狀態轉換
    4.3 用戶角色權限的驗證：不僅要驗證有權限的角色能夠正常操作，也需要驗證沒有權限的角色是否能操作。
    5.  根據不同的覆蓋情況，將得到不同的測試案例
    5.1 覆蓋所有狀態：完全狀態巡訪（all states）
    5.2 覆蓋所有狀態轉換（事件）：完全轉換（包含 all states）
    隨機測試：
    1.  主要是根據使用者的經驗及相關知識對待測軟體進行功能或效能抽查
    1.1 有時會包括到一些當前測試案例沒有覆蓋到的部分
    1.2 也可以針對軟體新增或更新的功能做一些重點測試，如特殊場景、特殊環境
    1.3 可以結合回歸測試一起進行。
    2.  執行隨機測試的方法
    2.1 前提條件
    2.1.1   熟悉產品的各項功能和產品的邏輯結果
    2.1.2   熟悉測試案例
    2.1.3   完整的執行過測試案例
    2.1.4   熟悉在案例的測試階段所發現的 Bug 和 Bug 的分佈情況
    2.1.5   測試人員具備一定的測試經驗，對 Bug 有敏銳的洞察力
    2.2 選取隨機測試的功能點
    2.2.1   根據案例的測試階段對產品的了解來選取 Bug 比較密集的功能模組
    2.2.2   根據重現率比較低的 Bug 涉及的功能點選取隨即測試功能點
    2.2.2.1 重現率比較低的 Bug 是隱藏比較深的 Bug ，這些 Bug 可能正是導致軟體無法上線的原因。
    2.2.2.2 因此重現這些隱藏 Bug 是十分重要的工作。
    2.2.3   與開發人員溝通了解軟體的 Bug
    2.2.3.1 了解到程式本身哪些地方最複雜，最薄弱，這些地方最容易發生什麼錯誤，可通過對程式的熟悉，得到較好的掌握
    2.2.3.2 了解工程師最容易在哪些地方犯哪些錯誤，可通過對 Bug 的分析得到
    2.2.4   根據經驗選取功能點
    2.2.5   隨機選取功能點
    3   優缺點
    3.1 優點
    3.1.1   因為用戶有很多，很多測試案例不一定能夠包含實際的測試場景，所以有時候隨機測試較容易發現一些測試案例無法發現的問題
    3.1.2   此外，像是安全性方面的軟體，就需要多點隨機測試來彌補測試案例的不足。
    3.2 缺點
    3.2.1   隨機測試常常是突發奇想，或是為了某個特定的目的進行的測試，就這一次
    3.2.2   因為沒有特定的記錄，所以也不能重複使用。
    3.2.3   隨機測試也有限制，需要有經驗的人使用，才容易抓出不容易抓出的 Bug
    3.2.4   由於是隨機去執行，所以覆蓋率也沒有測試案例來的完整，有漏測的可能性。
    回歸測試：
    1.  概念：
    1.1 回歸測試是指重複執行既有的全部或部分的相同測試。
    1.2 新加入測試的 module，可能對其他 module 產生 side effect，故須進行某些程度的回歸測試。
    1.3 回歸測試的重心，以關鍵性 module 為核心，以有關聯的 module 為輔。
    1.4 在軟體開發的各階段，都會進行多次的回歸測試
    1.4.1   由於一些預算或進度的問題，我們不可能每次都進行全面性的回歸測試，因此，我們必須選擇較正確的回歸測試策略，盡可能快速且有效地進行回歸測試。
    2.  策略：
    2.1 完全重複測試
    2.1.1   方法：再次測試全部測試案例
    2.1.2   優點：最安全的策略，風險最低
    2.1.3   缺點：費時，費工
    2.2 基於風險/優先權進行測試
    2.2.1   方法：
    2.2.1.1 首先運行最重要，最關鍵，最可疑的測試
    2.2.1.2 跳過那些非慣見，優先級別低，高穩定的測試用例
    2.2.2   優點：可以管控到重大風險的問題
    2.2.3   缺點：實施起來有一定難度，鑑定風險等級需要技術
    2.3 基於重要或是頻繁使用的功能進行測試
    2.3.1   方法：
    2.3.1.1 優先選擇那些針對重要或頻繁使用的測試用例
    2.3.1.2 釋放和緩解最高級別的風險
    2.3.1.3 有助於盡早發現那些對可靠性有重大影響的故障
    2.3.2   優點：可在預算下最有效的提高系統可靠度
    2.3.3   缺點：實施起來有一定難度，鑑定何謂重要的功能需要技術
    2.4 測試修改的部分
    2.4.1   方法：當我們對於修改局部有足夠信心時
    2.4.1.1 可通過相依性分析是別軟體的修改情況
    2.4.1.2 分析修改的影響
    2.4.1.3 將回歸測試局限於被改變的 module 和他的接口上
    2.4.2   優點：最簡易且小規模的測試
    2.4.3   缺點：範圍不夠全面，只能驗證修改的部分是否有問題
    2.5 選擇性重複測試
    2.5.1   方法：選擇一部分進行執行
    2.5.1.1 確認問題修改的正確性
    2.5.1.2 修改後周邊是否受到影響
    2.5.2   優點：較快速且有效的策略
    2.5.3   缺點：分析影響的部分，較需要技術
    2.5.4   選擇性重複測試的方法
    2.5.4.1 覆蓋修改法：針對發生錯誤的 module ，選取這個 module 的全部用例進行測試．這樣只能驗證本 module 是否還存在 defects ，但不能保證周邊與它有聯繫的 module 不會因為這次改動而引發 defects 。
    2.5.4.2 周邊影響法：除了 ​​把出錯 module 的用例執行之外，把周邊和它有聯繫的 module 的用例也執行一遍，保證回歸測試的質量。
    2.5.4.3 指標達成法：用量化的角度去分析 module 的質量，比如：經過上面的一系列回歸測試後，看看遺留的 defects 率是否已經在允許的範圍之內了，那麼我們以此為標準可以結束本次回歸測試 。
    3.  流程：
    3.1 在測試策略制定階段，制定回歸測試策略
    3.2 確定回歸測試版本
    3.3 回歸測試版本發布，按照回歸測試策略執行回歸測試
    3.4 回歸測試通過，關閉 defects tracking issue
    3.5 回歸測試不通過， 將 defects issue 退回給開發人員，待重新修改後再次做回歸測試
    4.  注意事項
    4.1 各測試階段發生的修改一定要在本測試階段內完成回歸，以免將錯誤遺留到下一測試階段。
    4.2 回歸測試期間應對該軟體版本 freeze (code freeze)，將回歸測試發現的問題集中修改，集中回歸。
    4.3 在實際工作中，可以將回歸測試與兼容性測試結合起來進行。
    4.3.1   在新的配置條件下運行舊的測試可以發現兼容性問題，而同時也可以揭示 source code 在回歸方面的錯誤。
    4.4 回歸測試的是重複性高的活動，容易使測試人員感到疲勞或厭倦，降低測試效率。
    4.4.1   因此可以安排新進人員執行回歸測試，透過這樣的方式讓新進人員快速了解待測軟體
    4.4.2   另外安排資深人員去維護、新增 test case、執行 exploratory test 或者撰寫自動化測試。
    4.5 還可以在不影響測試目標的情況下，鼓勵測試者創造性地執行測試用例，變化的輸入、按鍵和配置，能夠有助於激勵測試者找到新的錯誤。
    4.6 雖然回歸測試主要是透過既有的測試來確保產品的更動不會影響到舊有的功能，但是還是要維護 test case 資料庫
    4.6.1   定期的 review、調整 test case，刪除過時、多餘的 test case，才能讓我們的測試維持在一定的水平之上。
    α、β、γ 
    1.  α (Alpha) 是第一階段，一般只供内部測試使用；
    2.  β (Beta) 是第二階段，已經消除了軟件中大部分的不完善之處；
    3.  γ (Gamma) 是第三個階段，此時產品已經相當成熟，只需在個別地方再做進一步的優化處理即可上市發行。
    4.  順序是由 α 測試開始，之後到 β 測試，以及 γ 測試。
    冒煙測試：將系統中的主要流程，裡面所用到的主要功能(必要功能、重要功能或你無法掌控的新功能)，優先串接起來進行測試，以確保用最少時間，檢核出該規劃的可行性
